#version 430

#define ITERATIONS 50
#define WIDTH 800
#define HEIGHT 600

layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2D img;

uniform dvec2 offset;
uniform double zoom;

dvec2 comp_mult(dvec2 first, dvec2 second);

void main() {
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);

    vec4 color = vec4(0.0, 0.0, 0.0, 1.0);

    dvec2 z = dvec2(0.0, 0.0);
    dvec2 c = dvec2(double(pixel.x) / WIDTH * 2 - 1, double(pixel.y) / HEIGHT * 2 - 1) * zoom + offset;

    for(int i = 0; i < ITERATIONS; i++) {
        z = comp_mult(z, z) + c;
        if(z.x * z.x + z.y * z.y >= 4.0) {
            color = vec4((ITERATIONS - i) * 1.0 / ITERATIONS, (ITERATIONS - i) * 1.0 / ITERATIONS, 1.0, 1.0);
            break;
        }
    }

    imageStore(img, pixel, color);
}

dvec2 comp_mult(dvec2 first, dvec2 second) {
    return dvec2(first.x * second.x - first.y * second.y, first.x * second.y + first.y * second.x);
}