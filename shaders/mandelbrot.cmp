#version 430

#define ITERATIONS 1024
#define WIDTH 800
#define HEIGHT 600

layout(local_size_x = 32, local_size_y = 32) in;
layout(rgba32f, binding = 0) uniform image2D img;

uniform dvec2 offset;
uniform double zoom;

dvec2 comp_mult(dvec2 first, dvec2 second);
dvec2 comp_div(dvec2 first, dvec2 second);
//dvec2 comp_conj(dvec2 c);

vec3 spectral_color(float l)        // RGB <0,1> <- lambda l <400,700> [nm]
    {
    float t = 0.0;  vec3 c=vec3(0.0,0.0,0.0);
         if ((l>=400.0)&&(l<410.0)) { t=(l-400.0)/(410.0-400.0); c.r=    +(0.33*t)-(0.20*t*t); }
    else if ((l>=410.0)&&(l<475.0)) { t=(l-410.0)/(475.0-410.0); c.r=0.14         -(0.13*t*t); }
    else if ((l>=545.0)&&(l<595.0)) { t=(l-545.0)/(595.0-545.0); c.r=    +(1.98*t)-(     t*t); }
    else if ((l>=595.0)&&(l<650.0)) { t=(l-595.0)/(650.0-595.0); c.r=0.98+(0.06*t)-(0.40*t*t); }
    else if ((l>=650.0)&&(l<700.0)) { t=(l-650.0)/(700.0-650.0); c.r=0.65-(0.84*t)+(0.20*t*t); }
         if ((l>=415.0)&&(l<475.0)) { t=(l-415.0)/(475.0-415.0); c.g=             +(0.80*t*t); }
    else if ((l>=475.0)&&(l<590.0)) { t=(l-475.0)/(590.0-475.0); c.g=0.8 +(0.76*t)-(0.80*t*t); }
    else if ((l>=585.0)&&(l<639.0)) { t=(l-585.0)/(639.0-585.0); c.g=0.84-(0.84*t)           ; }
         if ((l>=400.0)&&(l<475.0)) { t=(l-400.0)/(475.0-400.0); c.b=    +(2.20*t)-(1.50*t*t); }
    else if ((l>=475.0)&&(l<560.0)) { t=(l-475.0)/(560.0-475.0); c.b=0.7 -(     t)+(0.30*t*t); }
    return c;
    }

void main() {
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);

    vec4 color = vec4(0.0, 0.0, 0.0, 1.0);

    dvec2 z = dvec2(0.0, 0.0);
    dvec2 c = dvec2(double(pixel.x) / WIDTH * 2 - 1, double(pixel.y) / HEIGHT * 2 - 1) * zoom + offset;

    for(int i = 0; i < ITERATIONS; i++) {
        z = comp_mult(z, z) + c;
        if(z.x * z.x + z.y * z.y >= 4.0) {
            color = vec4(spectral_color(float(i) - log(log(float(length(z)))) / log(2) * 1000).xyz, 1.0);
           // color = vec4((ITERATIONS - i) * 1.0 / ITERATIONS, (ITERATIONS - i) * 1.0 / ITERATIONS, 1.0, 1.0);
            break;
        }
    }
/*
    dvec2 c = dvec2(double(pixel.x) / WIDTH * 2 - 1, double(pixel.y) / HEIGHT * 2 - 1) * zoom + offset;

    dvec2 pc = c;
    dvec2 pc_deriv = dvec2(1.0, 0.0); 

    for(int i = 0; i < ITERATIONS; i++) {
        pc_deriv = 2 * comp_mult(pc, pc_deriv) + dvec2(1.0, 0.0);
        pc = comp_mult(pc, pc) + c;

   //     if(length(pc) >= 4.0) break;
    }

    double dist = length(pc) * log(float(length(pc))) / length(pc_deriv);

    vec4 color = vec4(0.5 * dist, dist, 2 * dist, 1.0);*/

    imageStore(img, pixel, color);
}

dvec2 comp_mult(dvec2 first, dvec2 second) {
    return dvec2(first.x * second.x - first.y * second.y, first.x * second.y + first.y * second.x);
}

dvec2 comp_div(dvec2 first, dvec2 second) {
    return dvec2((first.x * second.x + first.y * second.y) / (second.x * second.x + second.y * second.y), (first.y * second.x + first.x * second.y) / (second.x * second.x + second.y * second.y));
}

/*
dvec2 comp_conj(dvec2 c) {
    return dvec2(c.x, -c.y);
}
*/